def sendslacknotifications(String buildStatus = 'STARTED') {

  buildStatus =  buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
}



node{

    echo "job name is: ${env.JOB_NAME}"
    echo "node name is: ${env.NODE_NAME}"
    
    properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '6', daysToKeepStr: '', numToKeepStr: '6')), [$class: 'JobLocalConfiguration', changeReasonComment: ''], pipelineTriggers([pollSCM('* * * * *')])])
    
    def mavenhome = tool name: 'maven3.8.5'
    
    try{
    }//Try closing
    
    }//Node closing
    
    //get the code from github repo
    stage('checkoutcode'){
     git branch: 'development', credentialsId: '60570728-c90d-458e-af71-3fe33506d77b', url: 'https://github.com/anm-naveenteam/maven-web-application.git'   
    }
    //do the build by using maven build tool
    stage('build'){
    sh "${mavenhome}/bin/mvn clean package"
    }
    /*
    //execute the sonarqube report
    stage('executesonarqubereport'){
    sh "${mavenhome}/bin/mvn sonar:sonar"
    }
    //upload artifacts into artifactory repo
    stage ('uploadartifactsintonexus'){
    sh "${mavenhome}/bin/mvn deploy"
    }
    //deploy application into tomcat server
    stage ('deployapplicationintotomcatserver'){
    sshagent(['491349ac-76b6-4f9a-9036-829bf41bfca1']) {
    sh "scp -o strictHostkeychecking=no target/maven-web-application.war ec2-user@15.206.187.247:/opt/apache-tomcat-9.0.62/webapps/"
}

}
*/
}//Try cLosing
  catch(e){
  currentBuild.result = "FAILED"
  }
  Finally{

sendslacknotifications(currentBuild.result)
}
}//Node closing
